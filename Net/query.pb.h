// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_2eproto;
namespace QueryDef {
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace QueryDef
PROTOBUF_NAMESPACE_OPEN
template<> ::QueryDef::Answer* Arena::CreateMaybeMessage<::QueryDef::Answer>(Arena*);
template<> ::QueryDef::Query* Arena::CreateMaybeMessage<::QueryDef::Query>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace QueryDef {

// ===================================================================

class Query PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueryDef.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueryDef.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionerFieldNumber = 2,
    kQuestionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string questioner = 2;
  void clear_questioner();
  const std::string& questioner() const;
  void set_questioner(const std::string& value);
  void set_questioner(std::string&& value);
  void set_questioner(const char* value);
  void set_questioner(const char* value, size_t size);
  std::string* mutable_questioner();
  std::string* release_questioner();
  void set_allocated_questioner(std::string* questioner);
  private:
  const std::string& _internal_questioner() const;
  void _internal_set_questioner(const std::string& value);
  std::string* _internal_mutable_questioner();
  public:

  // string question = 3;
  void clear_question();
  const std::string& question() const;
  void set_question(const std::string& value);
  void set_question(std::string&& value);
  void set_question(const char* value);
  void set_question(const char* value, size_t size);
  std::string* mutable_question();
  std::string* release_question();
  void set_allocated_question(std::string* question);
  private:
  const std::string& _internal_question() const;
  void _internal_set_question(const std::string& value);
  std::string* _internal_mutable_question();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:QueryDef.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr questioner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// -------------------------------------------------------------------

class Answer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueryDef.Answer) */ {
 public:
  inline Answer() : Answer(nullptr) {}
  virtual ~Answer();

  Answer(const Answer& from);
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Answer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const final {
    return CreateMaybeMessage<Answer>(nullptr);
  }

  Answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueryDef.Answer";
  }
  protected:
  explicit Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_2eproto);
    return ::descriptor_table_query_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionerFieldNumber = 2,
    kAnswererFieldNumber = 3,
    kSolutionFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string questioner = 2;
  void clear_questioner();
  const std::string& questioner() const;
  void set_questioner(const std::string& value);
  void set_questioner(std::string&& value);
  void set_questioner(const char* value);
  void set_questioner(const char* value, size_t size);
  std::string* mutable_questioner();
  std::string* release_questioner();
  void set_allocated_questioner(std::string* questioner);
  private:
  const std::string& _internal_questioner() const;
  void _internal_set_questioner(const std::string& value);
  std::string* _internal_mutable_questioner();
  public:

  // string answerer = 3;
  void clear_answerer();
  const std::string& answerer() const;
  void set_answerer(const std::string& value);
  void set_answerer(std::string&& value);
  void set_answerer(const char* value);
  void set_answerer(const char* value, size_t size);
  std::string* mutable_answerer();
  std::string* release_answerer();
  void set_allocated_answerer(std::string* answerer);
  private:
  const std::string& _internal_answerer() const;
  void _internal_set_answerer(const std::string& value);
  std::string* _internal_mutable_answerer();
  public:

  // string solution = 4;
  void clear_solution();
  const std::string& solution() const;
  void set_solution(const std::string& value);
  void set_solution(std::string&& value);
  void set_solution(const char* value);
  void set_solution(const char* value, size_t size);
  std::string* mutable_solution();
  std::string* release_solution();
  void set_allocated_solution(std::string* solution);
  private:
  const std::string& _internal_solution() const;
  void _internal_set_solution(const std::string& value);
  std::string* _internal_mutable_solution();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:QueryDef.Answer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr questioner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answerer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solution_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Query

// int64 id = 1;
inline void Query::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Query::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Query::id() const {
  // @@protoc_insertion_point(field_get:QueryDef.Query.id)
  return _internal_id();
}
inline void Query::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Query::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:QueryDef.Query.id)
}

// string questioner = 2;
inline void Query::clear_questioner() {
  questioner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Query::questioner() const {
  // @@protoc_insertion_point(field_get:QueryDef.Query.questioner)
  return _internal_questioner();
}
inline void Query::set_questioner(const std::string& value) {
  _internal_set_questioner(value);
  // @@protoc_insertion_point(field_set:QueryDef.Query.questioner)
}
inline std::string* Query::mutable_questioner() {
  // @@protoc_insertion_point(field_mutable:QueryDef.Query.questioner)
  return _internal_mutable_questioner();
}
inline const std::string& Query::_internal_questioner() const {
  return questioner_.Get();
}
inline void Query::_internal_set_questioner(const std::string& value) {
  
  questioner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Query::set_questioner(std::string&& value) {
  
  questioner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryDef.Query.questioner)
}
inline void Query::set_questioner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  questioner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QueryDef.Query.questioner)
}
inline void Query::set_questioner(const char* value,
    size_t size) {
  
  questioner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryDef.Query.questioner)
}
inline std::string* Query::_internal_mutable_questioner() {
  
  return questioner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Query::release_questioner() {
  // @@protoc_insertion_point(field_release:QueryDef.Query.questioner)
  return questioner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Query::set_allocated_questioner(std::string* questioner) {
  if (questioner != nullptr) {
    
  } else {
    
  }
  questioner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), questioner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryDef.Query.questioner)
}

// string question = 3;
inline void Query::clear_question() {
  question_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Query::question() const {
  // @@protoc_insertion_point(field_get:QueryDef.Query.question)
  return _internal_question();
}
inline void Query::set_question(const std::string& value) {
  _internal_set_question(value);
  // @@protoc_insertion_point(field_set:QueryDef.Query.question)
}
inline std::string* Query::mutable_question() {
  // @@protoc_insertion_point(field_mutable:QueryDef.Query.question)
  return _internal_mutable_question();
}
inline const std::string& Query::_internal_question() const {
  return question_.Get();
}
inline void Query::_internal_set_question(const std::string& value) {
  
  question_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Query::set_question(std::string&& value) {
  
  question_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryDef.Query.question)
}
inline void Query::set_question(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  question_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QueryDef.Query.question)
}
inline void Query::set_question(const char* value,
    size_t size) {
  
  question_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryDef.Query.question)
}
inline std::string* Query::_internal_mutable_question() {
  
  return question_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Query::release_question() {
  // @@protoc_insertion_point(field_release:QueryDef.Query.question)
  return question_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Query::set_allocated_question(std::string* question) {
  if (question != nullptr) {
    
  } else {
    
  }
  question_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), question,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryDef.Query.question)
}

// -------------------------------------------------------------------

// Answer

// int64 id = 1;
inline void Answer::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Answer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Answer::id() const {
  // @@protoc_insertion_point(field_get:QueryDef.Answer.id)
  return _internal_id();
}
inline void Answer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Answer::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:QueryDef.Answer.id)
}

// string questioner = 2;
inline void Answer::clear_questioner() {
  questioner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Answer::questioner() const {
  // @@protoc_insertion_point(field_get:QueryDef.Answer.questioner)
  return _internal_questioner();
}
inline void Answer::set_questioner(const std::string& value) {
  _internal_set_questioner(value);
  // @@protoc_insertion_point(field_set:QueryDef.Answer.questioner)
}
inline std::string* Answer::mutable_questioner() {
  // @@protoc_insertion_point(field_mutable:QueryDef.Answer.questioner)
  return _internal_mutable_questioner();
}
inline const std::string& Answer::_internal_questioner() const {
  return questioner_.Get();
}
inline void Answer::_internal_set_questioner(const std::string& value) {
  
  questioner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Answer::set_questioner(std::string&& value) {
  
  questioner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryDef.Answer.questioner)
}
inline void Answer::set_questioner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  questioner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QueryDef.Answer.questioner)
}
inline void Answer::set_questioner(const char* value,
    size_t size) {
  
  questioner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryDef.Answer.questioner)
}
inline std::string* Answer::_internal_mutable_questioner() {
  
  return questioner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Answer::release_questioner() {
  // @@protoc_insertion_point(field_release:QueryDef.Answer.questioner)
  return questioner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Answer::set_allocated_questioner(std::string* questioner) {
  if (questioner != nullptr) {
    
  } else {
    
  }
  questioner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), questioner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryDef.Answer.questioner)
}

// string answerer = 3;
inline void Answer::clear_answerer() {
  answerer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Answer::answerer() const {
  // @@protoc_insertion_point(field_get:QueryDef.Answer.answerer)
  return _internal_answerer();
}
inline void Answer::set_answerer(const std::string& value) {
  _internal_set_answerer(value);
  // @@protoc_insertion_point(field_set:QueryDef.Answer.answerer)
}
inline std::string* Answer::mutable_answerer() {
  // @@protoc_insertion_point(field_mutable:QueryDef.Answer.answerer)
  return _internal_mutable_answerer();
}
inline const std::string& Answer::_internal_answerer() const {
  return answerer_.Get();
}
inline void Answer::_internal_set_answerer(const std::string& value) {
  
  answerer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Answer::set_answerer(std::string&& value) {
  
  answerer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryDef.Answer.answerer)
}
inline void Answer::set_answerer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answerer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QueryDef.Answer.answerer)
}
inline void Answer::set_answerer(const char* value,
    size_t size) {
  
  answerer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryDef.Answer.answerer)
}
inline std::string* Answer::_internal_mutable_answerer() {
  
  return answerer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Answer::release_answerer() {
  // @@protoc_insertion_point(field_release:QueryDef.Answer.answerer)
  return answerer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Answer::set_allocated_answerer(std::string* answerer) {
  if (answerer != nullptr) {
    
  } else {
    
  }
  answerer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answerer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryDef.Answer.answerer)
}

// string solution = 4;
inline void Answer::clear_solution() {
  solution_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Answer::solution() const {
  // @@protoc_insertion_point(field_get:QueryDef.Answer.solution)
  return _internal_solution();
}
inline void Answer::set_solution(const std::string& value) {
  _internal_set_solution(value);
  // @@protoc_insertion_point(field_set:QueryDef.Answer.solution)
}
inline std::string* Answer::mutable_solution() {
  // @@protoc_insertion_point(field_mutable:QueryDef.Answer.solution)
  return _internal_mutable_solution();
}
inline const std::string& Answer::_internal_solution() const {
  return solution_.Get();
}
inline void Answer::_internal_set_solution(const std::string& value) {
  
  solution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Answer::set_solution(std::string&& value) {
  
  solution_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryDef.Answer.solution)
}
inline void Answer::set_solution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  solution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:QueryDef.Answer.solution)
}
inline void Answer::set_solution(const char* value,
    size_t size) {
  
  solution_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryDef.Answer.solution)
}
inline std::string* Answer::_internal_mutable_solution() {
  
  return solution_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Answer::release_solution() {
  // @@protoc_insertion_point(field_release:QueryDef.Answer.solution)
  return solution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Answer::set_allocated_solution(std::string* solution) {
  if (solution != nullptr) {
    
  } else {
    
  }
  solution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryDef.Answer.solution)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace QueryDef

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_2eproto
